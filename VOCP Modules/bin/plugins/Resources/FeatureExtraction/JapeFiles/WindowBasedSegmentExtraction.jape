Phase:  WindowBasedSegmentExtraction
Input: sideEffectWorkingSet drugsWorkingSet token
Options: control = all
Rule:  WindowBasedExtraction
Priority:30
(
({drugsWorkingSet}):drugsMention
({token}|{sideEffectWorkingSet}|{drugsWorkingSet})*
({sideEffectWorkingSet}):sideEffectMention
)
:pattern
-->
{
	try
	{
		AnnotationSet patternSet = bindings.get("pattern");

		Long patternStart = patternSet.firstNode().getOffset();
		Long patternEnd = patternSet.lastNode().getOffset();

		String pattern = doc.getContent().getContent(patternStart,
								  patternEnd).toString();

		gate.AnnotationSet sentenceAS = inputAS.get("Sentence",patternStart,patternEnd);

		AnnotationSet drugs = bindings.get("drugsMention");
		Annotation drugAnnot = drugs.iterator().next();
		FeatureMap drugFeatures  = drugAnnot.getFeatures();
		String drug = (String) drugFeatures.get("standardName");

		AnnotationSet sideEffects = bindings.get("sideEffectMention");
		Annotation sideEffectAnnot = sideEffects.iterator().next();
		FeatureMap sideEffectFeatures  = sideEffectAnnot.getFeatures();
		String sideEffect = doc.getContent().getContent(sideEffectAnnot.getStartNode().getOffset(),
								  sideEffectAnnot.getEndNode().getOffset()).toString();
		String seRule = (String) sideEffectFeatures.get("rule");
		String seType = "";

		if(seRule.equals("SideEffectExtraction - SideEffectByContext"))
			seType = "Contextual";
		else if(seRule.equals("SideEffectExtraction - SideEffectByChaining"))
			seType = "Chaining";
		else if(seRule.equals("SideEffectExtraction - SideEffectWithoutContext"))
			seType = "Non-Contextual";

		AnnotationSet toks = inputAS.get("Token", patternStart, patternEnd);
		FeatureMap featureMap = Factory.newFeatureMap();
		featureMap.put("kind", "word");
		AnnotationSet wordTokens = toks.get("Token",featureMap);


		//Windows Size feature
		String windowsType = "";
		if(wordTokens.size() < 23)
			windowsType = "ConsiderationSet";
		else
			windowsType = "outOfConsiderationWindow";

		gate.FeatureMap outFeatures = Factory.newFeatureMap();
		outFeatures.put("pattern", pattern);
		outFeatures.put("drugs", drug);
		outFeatures.put("sideEffect", sideEffect);
		outFeatures.put("sideEffectType", seType);
		outFeatures.put("drug-offset", drugAnnot.getStartNode().getOffset().toString());
		outFeatures.put("sideEffect-offset", sideEffectAnnot.getStartNode().getOffset().toString());
		outFeatures.put("SegmentType", "WindowBased");
		outFeatures.put("WindowsType", windowsType);

		outputAS.add(sentenceAS.firstNode(),sentenceAS.lastNode(),"Segment", outFeatures);


	/*String windowsType = "";
        if(wordTokens.size() < 23)
        {
            windowsType = "ConsiderationSet";
            gate.FeatureMap outFeatures = Factory.newFeatureMap();
            outFeatures.put("pattern", pattern);
            outFeatures.put("drugs", drug);
            outFeatures.put("sideEffect", sideEffect);
            outFeatures.put("sideEffectType", seType);
            outFeatures.put("drug-offset", drugAnnot.getStartNode().getOffset().toString());
		outFeatures.put("sideEffect-offset", sideEffectAnnot.getStartNode().getOffset().toString());
            outFeatures.put("SegmentType", "WindowBased");
            outFeatures.put("WindowsType", windowsType);

            outputAS.add(sentenceAS.firstNode(),sentenceAS.lastNode(),"Segment", outFeatures);
	}*/




	}catch(InvalidOffsetException e){
		throw new LuckyException(e);
	}

}