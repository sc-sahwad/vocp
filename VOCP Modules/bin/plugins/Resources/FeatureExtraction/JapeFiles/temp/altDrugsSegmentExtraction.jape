Phase:  SegmentExtraction  
Input: sideEffectWorkingSet1 drugsWorkingSet token Split ADWorkingSet   
Options: control = all
Rule:   SentenceBasedExtraction1  
Priority:50

(
(
({ADWorkingSet}):altDrugMention
({token})*
({sideEffectWorkingSet1}):seMention
)
({token,!Split})*)
:pattern 

-->  
{
	try
	{

		AnnotationSet patternSet = bindings.get("pattern");
										  
		Long patternStart = patternSet.firstNode().getOffset();
		Long patternEnd = patternSet.lastNode().getOffset();
		
		String pattern = doc.getContent().getContent(patternStart,
								  patternEnd).toString();

		gate.AnnotationSet sentenceAS = inputAS.get("Sentence",patternStart,patternEnd);

	
		AnnotationSet alt_drugs = bindings.get("altDrugMention");
		Annotation altDrugAnnot = alt_drugs.iterator().next();
		FeatureMap altDrugFeatures  = altDrugAnnot.getFeatures();
		Long altDrugStart = alt_drugs.firstNode().getOffset();
		Long altDrugEnd = alt_drugs.lastNode().getOffset();
		
		String altDrug = doc.getContent().getContent(altDrugStart,
								  altDrugEnd).toString();
		
		AnnotationSet sideEffects = bindings.get("seMention");
		Annotation sideEffectAnnot = sideEffects.iterator().next();
		FeatureMap sideEffectFeatures  = sideEffectAnnot.getFeatures();		
		String sideEffect = doc.getContent().getContent(sideEffectAnnot.getStartNode().getOffset(),
								  sideEffectAnnot.getEndNode().getOffset()).toString();
		String seRule = (String) sideEffectFeatures.get("rule");	
		String seType = "";
		if(seRule.equals("SideEffectExtraction - SideEffectByContext"))	
			seType = "Contextual";
		else if(seRule.equals("SideEffectExtraction - SideEffectByChaining"))
			seType = "Chaining";
		else if(seRule.equals("SideEffectExtraction - SideEffectWithoutContext"))
			seType = "Non-Contextual";
								  
		gate.FeatureMap outFeatures = Factory.newFeatureMap();
		outFeatures.put("pattern", pattern);
		outFeatures.put("alt_drugs", altDrug);
		outFeatures.put("sideEffect", sideEffect);
		outFeatures.put("sideEffectType", seType);
				
		outputAS.add(sentenceAS.firstNode(),sentenceAS.lastNode(),"AltDrugSegment", outFeatures);
	}catch(InvalidOffsetException e){
		throw new LuckyException(e);
	}

},
:altDrugMention {
 inputAS.removeAll(altDrugMentionAnnots);
 },
 :seMention {
 inputAS.removeAll(seMentionAnnots);
 }

Rule:  SentenceBasedExtraction2 
Priority:50
(
(
({sideEffectWorkingSet1}):seMention
({token})*
({ADWorkingSet}):altDrugMention
)
({token,!Split})*)
:pattern 

-->  
{
	try
	{

		AnnotationSet patternSet = bindings.get("pattern");
										  
		Long patternStart = patternSet.firstNode().getOffset();
		Long patternEnd = patternSet.lastNode().getOffset();
		
		String pattern = doc.getContent().getContent(patternStart,
								  patternEnd).toString();

		gate.AnnotationSet sentenceAS = inputAS.get("Sentence",patternStart,patternEnd);

	
		AnnotationSet alt_drugs = bindings.get("altDrugMention");
		Annotation altDrugAnnot = alt_drugs.iterator().next();
		FeatureMap altDrugFeatures  = altDrugAnnot.getFeatures();
		Long altDrugStart = alt_drugs.firstNode().getOffset();
		Long altDrugEnd = alt_drugs.lastNode().getOffset();
		
		String altDrug = doc.getContent().getContent(altDrugStart,
								  altDrugEnd).toString();
		
		AnnotationSet sideEffects = bindings.get("seMention");
		Annotation sideEffectAnnot = sideEffects.iterator().next();
		FeatureMap sideEffectFeatures  = sideEffectAnnot.getFeatures();		
		String sideEffect = doc.getContent().getContent(sideEffectAnnot.getStartNode().getOffset(),
								  sideEffectAnnot.getEndNode().getOffset()).toString();
		String seRule = (String) sideEffectFeatures.get("rule");	
		String seType = "";
		if(seRule.equals("SideEffectExtraction - SideEffectByContext"))	
			seType = "Contextual";
		else if(seRule.equals("SideEffectExtraction - SideEffectByChaining"))
			seType = "Chaining";
		else if(seRule.equals("SideEffectExtraction - SideEffectWithoutContext"))
			seType = "Non-Contextual";
								  
		gate.FeatureMap outFeatures = Factory.newFeatureMap();
		outFeatures.put("pattern", pattern);
		outFeatures.put("alt_drugs", altDrug);
		outFeatures.put("sideEffect", sideEffect);
		outFeatures.put("sideEffectType", seType);
		
		outputAS.add(sentenceAS.firstNode(),sentenceAS.lastNode(),"AltDrugSegment", outFeatures);
	}catch(InvalidOffsetException e){
		throw new LuckyException(e);
	}

},
:altDrugMention {
 inputAS.removeAll(altDrugMentionAnnots);
 },
 :seMention {
 inputAS.removeAll(seMentionAnnots);
 }

