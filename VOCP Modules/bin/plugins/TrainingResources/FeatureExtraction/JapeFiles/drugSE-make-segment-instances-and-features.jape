Imports: {
import static gate.Utils.*;
}

Phase: instances
Input: Side_Effect Drug Token Segment NounChunk VG has_effect
Options: control = all

Rule: pair
({Segment}):seg
-->
{
	try
	{
		AnnotationSet segmentsSet = bindings.get("seg");
		Annotation anAnn = (Annotation) segmentsSet.iterator().next();

		Long segStart = segmentsSet.firstNode().getOffset();
		Long segEnd = segmentsSet.lastNode().getOffset();

		String segment = doc.getContent().getContent(segStart,
								  segEnd).toString();
		//System.out.println(segment);

		//System.out.println(anAnn.getFeatures().get("drugs‚Äù));
		//System.out.println(anAnn.getFeatures().get("sideEffect"));

		AnnotationSet drugs = inputAS.get("Drug", segStart, segEnd);
		AnnotationSet sideEffect = inputAS.get("Side_Effect", segStart, segEnd);

		AnnotationSet has_effect = inputAS.get("has_effect", segStart, segEnd);
		//System.out.println(has_effect);

		//System.out.println(drugs);
		//System.out.println(sideEffect);

		gate.FeatureMap instanceFeatureMap = gate.Factory.newFeatureMap();
		gate.FeatureMap classFeatureMap = gate.Factory.newFeatureMap();



		for(Annotation p : drugs) {
			for(Annotation o : sideEffect)
			{

				// Find the left and right boundaries of the instance
				Long pStart = p.getStartNode().getOffset();
				Long oStart = o.getStartNode().getOffset();
				Long pEnd = p.getEndNode().getOffset();
				Long oEnd = o.getEndNode().getOffset();
				Long left = (pEnd < oEnd) ? pEnd : oEnd;
				Long right = (pStart > oStart) ? pStart : oStart;
				Long excludeLeft = (pStart < oStart) ? pStart : oStart;
				Long excludeRight = (pEnd > oEnd) ? pEnd : oEnd;

				String pairOrder = "";
				if(pStart < oStart)
					pairOrder = "drug-SE";
				else
					pairOrder = "SE-drug";


				String drug = doc.getContent().getContent(pStart,pEnd).toString();
				String sideEffectString = doc.getContent().getContent(oStart,
				oEnd).toString();

				//System.out.println(drug + "-" + sideEffectString)

				int distance = -1;

				//System.out.println("p.getFeatures().getstandardName"+p.getFeatures().get("standardName"));
				//System.out.println(anAnn.getFeatures().get("Drug"));
				//System.out.println("sideEffectString"+ sideEffectString);
				//System.out.println(anAnn.getFeatures().get("Side_Effect"));

				String drugid = p.getFeatures().get("id").toString();
				String sideEffectid = o.getFeatures().get("id").toString();


				if(drugid.equals(anAnn.getFeatures().get("drug-Id").toString()) && sideEffectid.equals(anAnn.getFeatures().get("sideEffect-Id").toString()))
				{

					System.out.println("IN Feature Generation Block");
					// Create the instance
					instanceFeatureMap.put("drug-Id",anAnn.getFeatures().get("drug-Id").toString());
					instanceFeatureMap.put("sideEffect-Id",anAnn.getFeatures().get("sideEffect-Id").toString());


					AnnotationSet tokens = inputAS.get("Token", left, right);
					FeatureMap featureMap1 = Factory.newFeatureMap();
					featureMap1.put("kind", "word");
					AnnotationSet wordTokens = tokens.get("Token",featureMap1);
					instanceFeatureMap.put("distance",wordTokens.size());

					AnnotationSet drugTokens = inputAS.get("Drug", left, right);
					instanceFeatureMap.put("drugsInBetween",drugTokens.size());

					instanceFeatureMap.put("sentencesInBetween",inputAS.get("Sentence", left, right).size());

					AnnotationSet seTokens = inputAS.get("Side_Effect", left, right);
					instanceFeatureMap.put("seInBetween",seTokens.size());

					boolean sameNP = false;
					AnnotationSet nounChunks = inputAS.get("NounChunk", segStart, segEnd);
					for(Annotation n : nounChunks) {
					    String nounChunk = doc.getContent().getContent(n.getStartNode().getOffset(),
								  n.getEndNode().getOffset()).toString();
					    //System.out.println("nounChunk - " + nounChunk);
					    if(nounChunk.contains(drug) && nounChunk.contains(sideEffectString)) {
					      sameNP = true;
					      break;
					    }
					}
					instanceFeatureMap.put("sameNP",sameNP);

					boolean sameVP = false;
					AnnotationSet verbChunks = inputAS.get("VG", segStart, segEnd);
					for(Annotation n : verbChunks) {
					    String verbChunk = doc.getContent().getContent(n.getStartNode().getOffset(),
								  n.getEndNode().getOffset()).toString();
					    //System.out.println("verbChunk - " + verbChunk);
					    if(verbChunk.contains(drug) && verbChunk.contains(sideEffectString)) {
					      sameVP = true;
					      break;
					    }
					}
					instanceFeatureMap.put("sameVP",sameVP);

					//Word features
					FeatureMap kind = Factory.newFeatureMap();
					kind.put("kind", "word");
					AnnotationSet segWordTokens = inputAS.get("Token",kind);
					//System.out.println(segStart + "==" + excludeLeft + "==" + segEnd);
					AnnotationSet beforeM1Tokens = segWordTokens.get("Token", segStart, excludeLeft);
					AnnotationSet afterM2Tokens = segWordTokens.get("Token", excludeRight, segEnd);
					AnnotationSet betweenTokens = segWordTokens.get("Token", left, right);
					AnnotationSet m1Tokens = inputAS.get("Token", excludeLeft, left);
					AnnotationSet m2Tokens = inputAS.get("Token", right, excludeRight);

					List<Annotation> beforeM1TokList = new ArrayList<Annotation>(beforeM1Tokens);
					Collections.sort(beforeM1TokList, new OffsetComparator());

					List<Annotation> afterM2TokList = new ArrayList<Annotation>(afterM2Tokens);
					Collections.sort(afterM2TokList, new OffsetComparator());

					List<Annotation> betweenTokList = new ArrayList<Annotation>(betweenTokens);
					Collections.sort(betweenTokList, new OffsetComparator());

					List<Annotation> m1TokList = new ArrayList<Annotation>(m1Tokens);
					Collections.sort(m1TokList, new OffsetComparator());

					List<Annotation> m2TokList = new ArrayList<Annotation>(m2Tokens);
					Collections.sort(m2TokList, new OffsetComparator());



					if(pairOrder.equals("drug-SE"))
					{
						instanceFeatureMap.put("WM1",p.getFeatures().get("standardName"));
						instanceFeatureMap.put("WM2",o.getFeatures().get("standardName"));
					}
					else
					{
						instanceFeatureMap.put("WM1",o.getFeatures().get("standardName"));
						instanceFeatureMap.put("WM2",p.getFeatures().get("standardName"));
					}

					instanceFeatureMap.put("HM1",stringFor(doc, m1TokList.get(0)));
					instanceFeatureMap.put("HM2",stringFor(doc, m2TokList.get(0)));
					if(beforeM1TokList.size() ==0)
					{
						instanceFeatureMap.put("BM1F","");
						instanceFeatureMap.put("BM1L","");
					}
					else if(beforeM1TokList.size() ==1)
					{
						instanceFeatureMap.put("BM1F",stringFor(doc, beforeM1TokList.get(beforeM1TokList.size()-1)));
						instanceFeatureMap.put("BM1L","");
					}
					else
					{
						instanceFeatureMap.put("BM1F",stringFor(doc, beforeM1TokList.get(beforeM1TokList.size()-1)));
						instanceFeatureMap.put("BM1L",stringFor(doc, beforeM1TokList.get(beforeM1TokList.size()-2)));
					}

					if(afterM2TokList.size() ==0)
					{
						instanceFeatureMap.put("AM2F","");
						instanceFeatureMap.put("AM2L","");
					}
					else if(afterM2TokList.size() ==1)
					{
						instanceFeatureMap.put("AM2F",stringFor(doc, afterM2TokList.get(0)));
						instanceFeatureMap.put("AM2L","");
					}
					else
					{
						instanceFeatureMap.put("AM2F",stringFor(doc, afterM2TokList.get(0)));
						instanceFeatureMap.put("AM2L",stringFor(doc, afterM2TokList.get(1)));
					}


					instanceFeatureMap.put("WBNULL","FALSE");
					instanceFeatureMap.put("WBFL","");
					instanceFeatureMap.put("WBF","");
					instanceFeatureMap.put("WBL","");
					instanceFeatureMap.put("WBO","");

					if(betweenTokList.size()== 0)
					{
						instanceFeatureMap.put("WBNULL","TRUE");
					}
					else if (betweenTokList.size()== 1)
					{
						instanceFeatureMap.put("WBFL",stringFor(doc, betweenTokList.get(0)));
					}
					else if (betweenTokList.size()== 2)
					{
						instanceFeatureMap.put("WBF",stringFor(doc, betweenTokList.get(0)));
						instanceFeatureMap.put("WBL",stringFor(doc, betweenTokList.get(betweenTokList.size()-1)));
					}
					else
					{
						instanceFeatureMap.put("WBF",stringFor(doc, betweenTokList.get(0)));
						instanceFeatureMap.put("WBL",stringFor(doc, betweenTokList.get(betweenTokList.size()-1)));

						String betweenString = "";
						for(int i=1; i<betweenTokList.size()-1; i++)
						{
							Annotation token = betweenTokList.get(i);
							betweenString = betweenString + stringFor(doc, token) + "-";
						}
					  	instanceFeatureMap.put("WBO",betweenString);
					}

					instanceFeatureMap.put("pairOrder", pairOrder);

					//POS features
					instanceFeatureMap.put("HM1POS",m1TokList.get(0).getFeatures().get("category"));
					instanceFeatureMap.put("HM2POS",m2TokList.get(0).getFeatures().get("category"));

					if(beforeM1TokList.size() ==0)
					{
						instanceFeatureMap.put("BM1FPOS","");
						instanceFeatureMap.put("BM1LPOS","");
					}
					else if(beforeM1TokList.size() ==1)
					{
						instanceFeatureMap.put("BM1FPOS",beforeM1TokList.get(beforeM1TokList.size()-1).getFeatures().get("category"));
						instanceFeatureMap.put("BM1LPOS","");
					}
					else
					{
						instanceFeatureMap.put("BM1FPOS",beforeM1TokList.get(beforeM1TokList.size()-1).getFeatures().get("category"));
						instanceFeatureMap.put("BM1LPOS",beforeM1TokList.get(beforeM1TokList.size()-2).getFeatures().get("category"));
					}

					if(afterM2TokList.size() ==0)
					{
						instanceFeatureMap.put("AM2FPOS","");
						instanceFeatureMap.put("AM2LPOS","");
					}
					else if(afterM2TokList.size() ==1)
					{
						instanceFeatureMap.put("AM2FPOS",afterM2TokList.get(0).getFeatures().get("category"));
						instanceFeatureMap.put("AM2LPOS","");
					}
					else
					{
						instanceFeatureMap.put("AM2FPOS",afterM2TokList.get(0).getFeatures().get("category"));
						instanceFeatureMap.put("AM2LPOS",afterM2TokList.get(1).getFeatures().get("category"));
					}


					instanceFeatureMap.put("POSBFL","");
					instanceFeatureMap.put("POSBF","");
					instanceFeatureMap.put("POSBL","");
					instanceFeatureMap.put("POSBO","");

					if(betweenTokList.size()== 0)
					{

					}
					else if (betweenTokList.size()== 1)
					{
						instanceFeatureMap.put("POSBFL",betweenTokList.get(0).getFeatures().get("category"));
					}
					else if (betweenTokList.size()== 2)
					{
						instanceFeatureMap.put("POSBF",betweenTokList.get(0).getFeatures().get("category"));
						instanceFeatureMap.put("POSBL",betweenTokList.get(betweenTokList.size()-1).getFeatures().get("category"));
					}
					else
					{
						instanceFeatureMap.put("POSBF",betweenTokList.get(0).getFeatures().get("category"));
						instanceFeatureMap.put("POSBL",betweenTokList.get(betweenTokList.size()-1).getFeatures().get("category"));

						String betweenPOSString = "";
						for(int i=1; i<betweenTokList.size()-1; i++)
						{
							Annotation token = betweenTokList.get(i);
							betweenPOSString = betweenPOSString + token.getFeatures().get("category") + "-";
						}
					  	instanceFeatureMap.put("POSBO",betweenPOSString);
					}



					classFeatureMap.put("drug-Id",anAnn.getFeatures().get("drug-Id").toString());
					classFeatureMap.put("sideEffect-Id",anAnn.getFeatures().get("sideEffect-Id").toString());

					// Uncomment for training purposes
					classFeatureMap.put("rel-type","invalid");

					// Uncomment for testing purposes
					//	classFeatureMap.put("value", "invalid");

					for(Annotation he : has_effect) {
					String entity1_id = he.getFeatures().get("entity1-id").toString();
					String entity2_id = he.getFeatures().get("entity2-id").toString();
					String drug_id = anAnn.getFeatures().get("drug-Id").toString();
					String sideEffect_id = anAnn.getFeatures().get("sideEffect-Id").toString();

					// Uncomment for training purposes
					if((entity1_id.equals(drug_id))&&(entity2_id.equals(sideEffect_id)))
					{
						classFeatureMap.put("rel-type","valid");
						break;
					}

					// Uncomment for testing purposes
					/*if((entity1_id.equals(drug_id))&&(entity2_id.equals(sideEffect_id)))
					{
						classFeatureMap.put("value","valid");
						break;
					}*/

					}





				}
			}
		}

				try
				{
					if(instanceFeatureMap.size()!=0)
					{
						outputAS.add(segStart, segEnd, "RelationInstance", instanceFeatureMap);
						outputAS.add(segStart, segEnd, "RelationClass", classFeatureMap);
						outputAS.add(segStart, segEnd, "OrigClass", classFeatureMap);
						//System.out.println("Printing Map");
						//System.out.println(classFeatureMap);

					}
					else
					{
						outputAS.add(segStart, segEnd, "SegmentInstanceErr", anAnn.getFeatures());
						outputAS.add(segStart, segEnd, "SegmentClassErr", anAnn.getFeatures());
					}
				}catch(Exception e)
				{
				}

}catch(InvalidOffsetException e){
		throw new LuckyException(e);
	}
}


























