drop table temp;
drop table drugRegimen;
drop table STSD;
drop table allRelations;
drop table postRelations;
drop table tempMember;
create table temp(system_id string);
INSERT INTO temp select system_id from parseddata where adStatus=2 and atStatus=2 and dStatus=2 and rStatus=2 and is_processed=1;


create table drugRegimen(system_id string,sideEffect string,drug string,drugSEConfidenceScore double,drugSEValidity string,regimen string, regimenSEConfidenceScore double,regimenSEValidity string, drugSeRelationId string, seRegRelationId string);

INSERT INTO drugRegimen
Select A.system_id as system_id,A.sideEffect as sideEffect,drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity,
drugSeRelationId, seRegRelationId FROM
(select drug,confidence_score as drugSEConfidenceScore,relationType as drugSEValidity,sideEffect,system_id,drugSeRelationId from drugSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)A
LEFT OUTER JOIN
(select regimen,confidence_score as regimenSEConfidenceScore,relationType as regimenSEValidity,sideEffect,system_id, seRegRelationId from regimenSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect);


INSERT INTO drugRegimen
Select B.system_id as system_id,B.sideEffect as sideEffect,drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity,
drugSeRelationId, seRegRelationId FROM
(select drug,confidence_score as drugSEConfidenceScore,relationType as drugSEValidity,sideEffect,system_id,drugSeRelationId from drugSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)A
RIGHT OUTER JOIN
(select regimen,confidence_score as regimenSEConfidenceScore,relationType as regimenSEValidity,sideEffect,system_id, seRegRelationId from regimenSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect) where A.drug IS NULL;



create table STSD(system_id string,sideEffect string,supportiveTherapy string,sideEffectSTConfidenceScore double,sideEffectSTValidity string,supportiveDrug string, sideEffectSDConfidenceScore double,sideEffectSDValidity string,seStRelationId string, seSdRelationId string);

INSERT INTO STSD
Select A.system_id as system_id,A.sideEffect as sideEffect, supportiveTherapy, sideEffectSTConfidenceScore, sideEffectSTValidity, supportiveDrug, sideEffectSDConfidenceScore, sideEffectSDValidity, 
seStRelationId, seSdRelationId FROM
(select altTherapy as supportiveTherapy,confidence_score as sideEffectSTConfidenceScore,relationType as sideEffectSTValidity,sideEffect,system_id, seStRelationId from altTherapySegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)A
LEFT OUTER JOIN
(select altDrug as supportiveDrug,confidence_score as sideEffectSDConfidenceScore,relationType as sideEffectSDValidity,sideEffect,system_id, seSdRelationId from altDrugSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect);


INSERT INTO STSD
Select B.system_id as system_id,B.sideEffect as sideEffect, supportiveTherapy, sideEffectSTConfidenceScore, sideEffectSTValidity, supportiveDrug, sideEffectSDConfidenceScore, sideEffectSDValidity, 
seStRelationId, seSdRelationId FROM
(select altTherapy as supportiveTherapy,confidence_score as sideEffectSTConfidenceScore,relationType as sideEffectSTValidity,sideEffect,system_id, seStRelationId from altTherapySegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)A
RIGHT OUTER JOIN
(select altDrug as supportiveDrug,confidence_score as sideEffectSDConfidenceScore,relationType as sideEffectSDValidity,sideEffect,system_id, seSdRelationId from altDrugSegments where system_id IN (select * from temp) AND sideEffect IS NOT NULL)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect) where A.supportiveTherapy IS NULL;




create table allRelations(system_id string,sideEffect string,drug string,drugSEConfidenceScore double,drugSEValidity string,regimen string, regimenSEConfidenceScore double,regimenSEValidity string,supportiveTherapy string,sideEffectSTConfidenceScore double,sideEffectSTValidity string,supportiveDrug string, sideEffectSDConfidenceScore double,sideEffectSDValidity string, drugSeRelationId string, seRegRelationId string, seStRelationId string, seSdRelationId string);


INSERT INTO allRelations
Select A.system_id as system_id,A.sideEffect as sideEffect,drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity, supportiveTherapy, sideEffectSTConfidenceScore, sideEffectSTValidity, supportiveDrug, sideEffectSDConfidenceScore, sideEffectSDValidity, drugSeRelationId, seRegRelationId, seStRelationId, seSdRelationId FROM
(select drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity,sideEffect,system_id, drugSeRelationId, seRegRelationId from drugRegimen)A
LEFT OUTER JOIN
(select supportiveTherapy,sideEffectSTConfidenceScore,sideEffectSTValidity,supportiveDrug,sideEffectSDConfidenceScore,sideEffectSDValidity,sideEffect,system_id,
seStRelationId, seSdRelationId from STSD)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect);


INSERT INTO allRelations
Select B.system_id as system_id,B.sideEffect as sideEffect,drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity, supportiveTherapy, sideEffectSTConfidenceScore, sideEffectSTValidity, supportiveDrug, sideEffectSDConfidenceScore, sideEffectSDValidity, drugSeRelationId, seRegRelationId, seStRelationId, seSdRelationId FROM
(select drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity,sideEffect,system_id,
drugSeRelationId, seRegRelationId from drugRegimen)A
RIGHT OUTER JOIN
(select supportiveTherapy,sideEffectSTConfidenceScore,sideEffectSTValidity,supportiveDrug,sideEffectSDConfidenceScore,sideEffectSDValidity,sideEffect,system_id, seStRelationId, seSdRelationId from STSD)B
on(A.system_id=B.system_id AND A.sideEffect=B.sideEffect) where A.drug IS NULL AND A.regimen IS NULL;




create table postRelations(system_id string,member_id string,message string,postDate string,postUrl string,sideEffect string,drug string,drugSEConfidenceScore double,drugSEValidity string,regimen string, regimenSEConfidenceScore double,regimenSEValidity string,supportiveTherapy string,sideEffectSTConfidenceScore double,sideEffectSTValidity string,supportiveDrug string, sideEffectSDConfidenceScore double,sideEffectSDValidity string, drugSeRelationId string, seRegRelationId string, seStRelationId string, seSdRelationId string);


INSERT INTO postRelations 
select B.system_id as system_id,member_id,message,postDate,postUrl,sideEffect,drug,drugSEConfidenceScore,drugSEValidity,regimen,regimenSEConfidenceScore,regimenSEValidity, supportiveTherapy, sideEffectSTConfidenceScore, sideEffectSTValidity, supportiveDrug, sideEffectSDConfidenceScore, sideEffectSDValidity, sideEffectSDValidity, drugSeRelationId, seRegRelationId, seStRelationId, seSdRelationId from 

(select system_id,member_id,message,postDate,postUrl from parseddata where system_id IN (select system_id from allRelations))A

RIGHT OUTER JOIN

(select * from allRelations)B

on(A.system_id=B.system_id);


create table tempMember(member_id string,age string,cancerStage string,Treatment_Chemotherapy string,Diagnosis_Type string,her2Status string);

INSERT INTO tempMember
select member_id,age,cancerStage,Treatment_Chemotherapy,Diagnosis_Type,her2Status from member where member_id in (select member_id from postRelations);



ADD JAR /home/centos/apache-hive-1.2.1-bin/lib/hive-contrib-1.2.1.jar;



INSERT INTO output
Select system_id as message_id,
A.member_id as member_id,
message,
postDate,
sideEffect,
drug,
regimen,
supportiveTherapy,
supportiveDrug,
'0' as isIndexed,
postUrl,
drugSEValidity,
drugSEConfidenceScore,
sideEffectSTValidity,
sideEffectSTConfidenceScore,
regimenSEValidity,
regimenSEConfidenceScore,
sideEffectSDValidity,
sideEffectSDConfidenceScore,
age as ageRange,
cancerStage,
Treatment_Chemotherapy as treatment,
Diagnosis_Type as cancerType,
her2Status,
sideEffectSDValidity,
drugSeRelationId,
seRegRelationId,
seStRelationId, 
seSdRelationId,
CONCAT(A.system_id,'-',incr(),unix_timestamp()) as result_id,
CONCAT(A.system_id,'-',incr(),unix_timestamp()) as key,

null as drugSEVerified,
null as drugSEVerificationScore,
null as sideEffectSTVerified,
null as sideEffectSTVerificationScore,
null as regimenSEVerified,
null as regimenSEVerificationScore,
null as sideEffectSDVerified,
null as sideEffectSDVerificationScore


FROM

(select * from postRelations where sideEffect is not null)A
LEFT OUTER JOIN
(select * from tempMember)B

on(A.member_id=B.member_id);







